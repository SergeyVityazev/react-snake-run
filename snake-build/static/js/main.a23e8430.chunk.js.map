{"version":3,"sources":["components/Cells/Cells.js","components/Field/Field.js","components/Control/Control.js","components/Statistic/Statistic.js","App.js","reportWebVitals.js","index.js"],"names":["Cells","props","divStyle","floatCell","float","clear","isWall","isSnake","isFood","className","style","Field","item","bodySnake","indexOf","Object","entries","cells","map","index","console","log","window","location","origin","Control","leftPush","rightPush","upPush","downPush","src","alt","onClick","Statistic","isLoss","count","App","state","growSnake","direction","timeId","setInterval","currentBodySnake","lastElem","length","column","Number","substr","row","push","shift","setState","isEat","deletePreviousPush","clearInterval","newFood","Math","floor","random","k","forEach","i","j","rowNumber","columnNumber","isEmpty","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a23e8430.chunk.js","sourcesContent":["import React from 'react';\nimport './Cells.css';\n\nconst Cells = (props) => {\n  let divStyle = {};\n  if (props.floatCell === 'left') {\n    divStyle = {\n      float: 'left',\n    };\n  } else if (props.floatCell === 'none') {\n    divStyle = {\n      clear: 'left',\n      float: 'left',\n    };\n  }\n\n  if (props.isWall) {\n    divStyle['background-color'] = 'yellow';\n  }\n  \n  if (props.isSnake) {\n    divStyle['background-color'] = 'black';\n  }\n\n  if (props.isFood) {\n    divStyle['background-color'] = 'red';\n  }\n\n  return props.isWall ? (\n    <div className=\"Cell\" style={divStyle}></div>\n  ) : (\n    <div className=\"Cell\" style={divStyle}></div>\n  );\n};\n\nexport default Cells;\n","import React from 'react';\nimport Cells from '../Cells/Cells';\nimport './Field.css';\n\nexport const Field = (props) => {\n\n   function isSnake(item) {\n      return props.bodySnake.indexOf(item)>=0 ? true : false;\n   }\n  \n  return (\n    <div className=\"Field\">\n      {Object.entries(props.cells).map((item, index) =>\n        index % 32 === 0 && index !== 0 ? (\n          <Cells\n            floatCell={'none'}\n            isWall={item[1].isWall}\n            isSnake={isSnake(item[0]) ? true : false}\n            isFood={item[0] === props.isFood ? props.isFood : false}\n          />\n        ) : (\n          <Cells\n            floatCell={'left'}\n            isWall={item[1].isWall}\n            isSnake={isSnake(item[0]) ? true : false}\n            isFood={item[0] === props.isFood ? props.isFood : false}\n          />\n        ),\n      )}\n    </div>\n  );\n};\n\nexport default Field;\n","import React from 'react';\nimport './Control.css';\n\nconsole.log(window.location.origin);\nfunction Control({leftPush, rightPush,upPush,downPush}) {\n  return (\n    <div className=\"Control\">\n      <img src=\"img/left.png\" alt=\"left\" onClick={leftPush} />\n      <img src=\"img/right.png\" alt=\"right\" onClick={rightPush} />\n      <img src=\"img/up.png\" alt=\"up\" onClick={upPush} />\n      <img src=\"img/down.png\" alt=\"down\" onClick={downPush} />\n    </div>\n  );\n}\n\nexport default Control;\n","import React from 'react'\nimport './Statistic.css'\n\nconst Statistic = (props) => {\n    return (\n        <div className=\"Statistic\">\n            <p className=\"Title\">Statistic</p>\n            {props.isLoss?<p className=\"Loss\">You loss</p>:<p></p>}\n            <p>Счет: {props.count}</p>\n        </div>\n    )\n}\n\nexport default Statistic;\n\n\n","import React from 'react';\nimport './App.css';\nimport Field from './components/Field/Field'\nimport Control from './components/Control/Control'\nimport Statistic from './components/Statistic/Statistic';\nclass App extends React.Component {\n  state = [\n    {\n      isLoss: false,\n    },\n\n    { count: 0 },\n\n    {\n      cells: {},\n    },\n    {\n      bodySnake: [],\n    },\n    {\n      isFood: '',\n    },\n    {\n      growSnake: false,\n    },\n    {\n      direction: '',\n    },\n    {\n      timeId: '',\n    },\n  ];\n\n  constructor() {\n    super();\n    const cells = {};\n    let bodySnake = [];\n    for (let i = 0; i <= 31; i++) {\n      for (let j = 0; j <= 31; j++) {\n        if (i === 0 || j === 0 || i === 31 || j === 31) {\n          cells[`R${i}C${j}`] = {\n            rowNumber: i,\n            columnNumber: j,\n            isEmpty: false,\n            isFood: false,\n            isSnake: false,\n            isWall: true,\n          };\n        } else {\n          cells[`R${i}C${j}`] = {\n            rowNumber: i,\n            columnNumber: j,\n            isEmpty: false,\n            isFood: false,\n            isSnake: false,\n            isWall: false,\n          };\n        }\n      }\n    }\n    bodySnake = ['R1C1', 'R1C2', 'R1C3', 'R1C4', 'R1C5'];\n    let isFood = `R${Math.floor(Math.random() * (30 - 1)) + 1}C${\n      Math.floor(Math.random() * (30 - 1)) + 1\n    }`;\n    this.state = {\n      cells,\n      bodySnake,\n      isFood,\n      growSnake: false,\n      isLoss: false,\n      count: 0,\n      direction: '',\n      timeId: '',\n    };\n  }\n\n  leftPush = () => {\n    let left = () => {\n    if (!this.state.isLoss) {\n      const currentBodySnake = this.state.bodySnake;\n      let growSnake = this.state.growSnake;\n      let count = this.state.count;\n      let lastElem = currentBodySnake[currentBodySnake.length - 1];\n      let column = Number(lastElem.substr(lastElem.indexOf('C') + 1));\n      let row = Number(lastElem.substr(1, lastElem.indexOf('C') - 1));\n      if (currentBodySnake.indexOf(`R${row}C${column - 1}`, currentBodySnake.length - 2) === -1) {\n        column--;\n        lastElem = `R${row}C${column}`;\n        currentBodySnake.push(lastElem);\n        if (!growSnake) {\n          currentBodySnake.shift();\n        } else {\n          //змеюка съела еду и растет (последний эл. массива не удаляем)\n          count++;\n          growSnake = false;\n        }\n        this.setState({ bodySnake: currentBodySnake, growSnake: growSnake, count });\n      }\n      this.isLoss(lastElem);\n      this.isEat();\n      \n    }\n  }\n  let timeId = setInterval(left, 300);\n  this.deletePreviousPush('leftPush', timeId);\n  };\n\n  rightPush = () => {\n      let right = ()=> {       \n      if (!this.state.isLoss) {\n        const currentBodySnake = this.state.bodySnake;\n        let growSnake = this.state.growSnake;\n        let count = this.state.count;\n        let lastElem = currentBodySnake[currentBodySnake.length - 1];\n        let column = Number(lastElem.substr(lastElem.indexOf('C') + 1));\n        let row = Number(lastElem.substr(1, lastElem.indexOf('C') - 1));\n        if (currentBodySnake.indexOf(`R${row}C${column + 1}`, currentBodySnake.length - 2) === -1) {\n          column++;\n          lastElem = `R${row}C${column}`;\n          currentBodySnake.push(lastElem);\n          if (!growSnake) {\n            currentBodySnake.shift();\n          } else {\n            //змеюка съела еду и растет (последний эл. массива не удаляем)\n            count++;\n            growSnake = false;\n          }\n          this.setState({ bodySnake: currentBodySnake, growSnake: growSnake, count });\n        }\n        this.isLoss(lastElem);\n        this.isEat();       \n      }\n    }\n    let timeId = setInterval(right,300);\n    this.deletePreviousPush('rightPush', timeId);\n  };\n\n  upPush = () => {\n    let up = () => {\n      if (!this.state.isLoss) {\n        const currentBodySnake = this.state.bodySnake;\n        let growSnake = this.state.growSnake;\n        let count = this.state.count;\n        let lastElem = currentBodySnake[currentBodySnake.length - 1];\n        let column = Number(lastElem.substr(lastElem.indexOf('C') + 1));\n        let row = Number(lastElem.substr(1, lastElem.indexOf('C') - 1));\n        if (currentBodySnake.indexOf(`R${row - 1}C${column}`, currentBodySnake.length - 2) === -1) {\n          row--;\n          lastElem = `R${row}C${column}`;\n          currentBodySnake.push(lastElem);\n          if (!growSnake) {\n            currentBodySnake.shift();\n          } else {\n            //змеюка съела еду и растет (последний эл. массива не удаляем)\n            count++;\n            growSnake = false;\n          }\n          this.setState({ bodySnake: currentBodySnake, growSnake: growSnake, count });\n        }\n        this.isLoss(lastElem);\n        this.isEat();\n      }\n    }\n    let timeId = setInterval(up, 300);\n    this.deletePreviousPush('upPush', timeId);\n  };\n\n  downPush = () => {\n    let down = () => {\n      this.deletePreviousPush('downPush', timeId);\n    if (!this.state.isLoss) {\n      const currentBodySnake = this.state.bodySnake;\n      let growSnake = this.state.growSnake;\n      let count = this.state.count;\n      let lastElem = currentBodySnake[currentBodySnake.length - 1];\n      let column = Number(lastElem.substr(lastElem.indexOf('C') + 1));\n      let row = Number(lastElem.substr(1, lastElem.indexOf('C') - 1));\n      if (currentBodySnake.indexOf(`R${row + 1}C${column}`, currentBodySnake.length - 2) === -1) {\n        row++;\n        lastElem = `R${row}C${column}`;\n        currentBodySnake.push(lastElem);\n        if (!growSnake) {\n          currentBodySnake.shift();\n        } else {\n          //змеюка съела еду и растет (последний эл. массива не удаляем)\n          count++;\n          growSnake = false;\n        }\n        this.setState({ bodySnake: currentBodySnake, growSnake: growSnake, count });\n      }\n      this.isLoss(lastElem);\n      this.isEat();\n      \n    }\n  }\n  let timeId = setInterval(down, 300);\n  this.deletePreviousPush('downPush', timeId);\n  };\n\n  deletePreviousPush = (direction, timeId) => {\n    if (direction!== this.state.direction){\n      clearInterval(this.state.timeId)\n      this.setState({direction, timeId})\n    }\n  };\n\n  isEat = () => {\n    let lastElemBodySnake = this.state.bodySnake[this.state.bodySnake.length - 1];\n    if (lastElemBodySnake === this.state.isFood) {\n      let newFood = () => {\n        return `R${Math.floor(Math.random() * (30 - 1)) + 1}C${\n          Math.floor(Math.random() * (30 - 1)) + 1\n        }`;\n      };\n\n      this.setState({ isFood: newFood(), growSnake: true });\n      if (this.state.bodySnake.indexOf(newFood) >= 0) {\n        //рекурсивно вызовем функцию, если еда попала на тело змеи\n        this.isEat();\n      }\n    }\n  };\n\n  isLoss = (lastElem) => {\n    console.log(this.state.growSnake);\n    let k = 0;\n    this.state.bodySnake.forEach((item) => {\n      if (this.state.bodySnake.indexOf(item, k + 1) >= 0) {\n        console.log('YOU LOSS');\n        this.setState({ isLoss: true });\n      }\n      k++;\n    });\n    if (this.state.cells[lastElem].isWall) {\n      console.log('YOU LOSS, because Wall');\n      this.setState({ isLoss: true });\n    }\n  };\n\n  componentDidMount() {\n    console.log(this.state);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <Field\n            cells={this.state.cells}\n            bodySnake={this.state.bodySnake}\n            isFood={this.state.isFood}\n          />\n          <Control\n            leftPush={this.leftPush}\n            rightPush={this.rightPush}\n            upPush={this.upPush}\n            downPush={this.downPush}\n          />\n        </div>\n        <Statistic isLoss={this.state.isLoss} count={this.state.count} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}